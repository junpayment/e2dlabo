// Code generated by MockGen. DO NOT EDIT.
// Source: lib1.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLib2 is a mock of Lib2 interface.
type MockLib2 struct {
	ctrl     *gomock.Controller
	recorder *MockLib2MockRecorder
}

// MockLib2MockRecorder is the mock recorder for MockLib2.
type MockLib2MockRecorder struct {
	mock *MockLib2
}

// NewMockLib2 creates a new mock instance.
func NewMockLib2(ctrl *gomock.Controller) *MockLib2 {
	mock := &MockLib2{ctrl: ctrl}
	mock.recorder = &MockLib2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLib2) EXPECT() *MockLib2MockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockLib2) Do() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockLib2MockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockLib2)(nil).Do))
}
